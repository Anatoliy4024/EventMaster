## calendar_helpers.py

from datetime import datetime, timedelta
import calendar
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3
from shared.config import DATABASE_PATH  # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö


def get_dates_with_active_proformas():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–æ—Ñ–æ—Ä–º–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º >= 3.
    """
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT DISTINCT selected_date 
            FROM orders 
            WHERE status >= 3
        """)
        dates = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ñ–æ—Ä–º—ã
        return [date[0] for date in dates]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    finally:
        conn.close()


def check_date_reserved(date, reserved_dates):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –¥–∞—Ç–∞."""
    return date in reserved_dates


# bot/admin_bot/helpers/calendar_helpers.py
from datetime import datetime, timedelta
import calendar
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup


def to_superscript(num_str):
    superscript_map = str.maketrans('0123456789', '‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ')
    return num_str.translate(superscript_map)


def generate_month_name(month, language):
    months = {
        'en': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        'ru': ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
    return months[language][month - 1]


def generate_calendar_keyboard(month_offset=0, language='en'):
    today = datetime.today()
    base_month = today.month + month_offset
    base_year = today.year

    if base_month > 12:
        base_month -= 12
        base_year += 1
    elif base_month < 1:
        base_month += 12
        base_year -= 1

    first_of_month = datetime(base_year, base_month, 1)
    last_day = calendar.monthrange(first_of_month.year, first_of_month.month)[1]
    last_of_month = first_of_month.replace(day=last_day)

    month_name = generate_month_name(first_of_month.month, language)

    days_of_week = {
        'en': ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
        'ru': ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"],
    }

    calendar_buttons = [[InlineKeyboardButton(day, callback_data='none')] for day in days_of_week[language]]
    start_weekday = first_of_month.weekday()
    current_date = first_of_month

    reserved_dates = get_dates_with_active_proformas()  # Get reserved dates

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–Ω—è–º–∏ –º–µ—Å—è—Ü–∞
    for _ in range(5):  # 5 —Å—Ç—Ä–æ–∫ (–º–∞–∫—Å–∏–º—É–º) –¥–ª—è –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
        for day in range(len(calendar_buttons)):
            if current_date.day == 1 and day < start_weekday:
                calendar_buttons[day].append(InlineKeyboardButton(" ", callback_data='none'))
            elif current_date > last_of_month:
                calendar_buttons[day].append(InlineKeyboardButton(" ", callback_data='none'))
            else:
                day_text = to_superscript(str(current_date.day))

                # Check if the date is reserved
                if check_date_reserved(current_date.strftime("%Y-%m-%d"), reserved_dates):
                    calendar_buttons[day].append(InlineKeyboardButton(f"üîª {day_text}", callback_data=f'date_{current_date.strftime("%Y-%m-%d")}'))
                else:
                    calendar_buttons[day].append(InlineKeyboardButton(f" {current_date.day}",
                                                                      callback_data='none'))


                current_date += timedelta(days=1)

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ 1 –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥ –∏ 2 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥
    prev_month_button = InlineKeyboardButton("<",
                                             callback_data=f"prev_month_{month_offset - 1}") if month_offset > -1 else InlineKeyboardButton(
        " ", callback_data="none")
    next_month_button = InlineKeyboardButton(">",
                                             callback_data=f"next_month_{month_offset + 1}") if month_offset < 2 else InlineKeyboardButton(
        " ", callback_data="none")
    month_name_button = InlineKeyboardButton(f"{month_name} {first_of_month.year}", callback_data="none")

    calendar_buttons.append([prev_month_button, month_name_button, next_month_button])

    return InlineKeyboardMarkup(calendar_buttons)


def disable_calendar_buttons(reply_markup, selected_date):
    new_keyboard = []
    for row in reply_markup.inline_keyboard:
        new_row = []
        for button in row:
            if button.callback_data and button.callback_data.endswith(selected_date):
                new_row.append(InlineKeyboardButton(f"üî¥ {selected_date.split('-')[2]}", callback_data='none'))
            else:
                new_row.append(InlineKeyboardButton(button.text, callback_data='none'))
        new_keyboard.append(new_row)
    return InlineKeyboardMarkup(new_keyboard)

async def handle_calendar_navigation(update, context):
    query = update.callback_query
    data = query.data

    if data.startswith('date_'):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from bot.admin_bot.scenarios.admin_scenario import disable_calendar_buttons, generate_proforma_buttons

        # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞
        selected_date = data.split('_')[1]

        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å –∫—Ä–∞—Å–Ω–æ–π —Ç–æ—á–∫–æ–π
        new_reply_markup = disable_calendar_buttons(query.message.reply_markup, selected_date)
        await query.edit_message_reply_markup(reply_markup=new_reply_markup)

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ—Ñ–æ—Ä–º
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {selected_date}. –§–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ—Ñ–æ—Ä–º—ã...", reply_markup=generate_proforma_buttons(selected_date))

    elif data.startswith('prev_month_') or data.startswith('next_month_'):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from bot.admin_bot.scenarios.admin_scenario import generate_calendar_keyboard

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏
        month_offset = int(data.split('_')[-1])

        # –¢–µ–ø–µ—Ä—å –º—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ
        calendar_markup = generate_calendar_keyboard(month_offset)
        await query.edit_message_reply_markup(reply_markup=calendar_markup)
